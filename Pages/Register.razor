@page "/register"
@inject AuthStateProvider authStateProvider
@inject UserService userService
@inject NavigationManager navManager
@inject IJSRuntime jsRuntime

<PageTitle>Регистрация</PageTitle>

<h3>Регистрация</h3>
<style>
    label {
        margin-bottom: 1em;
    }
</style>
<form @onsubmit="Registration">
    @foreach (var item in userService.GetErrors())
    {
        <div class="form-control alert alert-danger">@item</div>
    }
    <label>
        Логин:
        <input required class="form-control" @bind="login" />
    </label>
    <br />
    <label>
        Почта:
        <input required class="form-control" @bind="email" />
    </label>
    <br />
    <label>
        Пароль:
        <input required class="form-control" type="password" @bind="password" />
    </label>
    <br />
    <label>
        Повторите пароль:
        <input required class="form-control" type="password" @bind="repassword" />
    </label>
    <br />
    <label>
        <select required class="form-control" @onchange="@((e) => ChangeVisibility(e))">
            <option value="" disabled selected hidden>Выберите роль</option>
            <option value="Customer">Заказчик</option>
            <option value="Builder">Застройщик</option>
            <option value="Designer">Проектировщик</option>
        </select>
    </label>
    <br />
    <label hidden="@hidden">
        <select class="form-control" @bind="industry">
            <option value="" disabled selected hidden>Выберите отрасль</option>
            <option value="WaterSupply">Водоснабжение</option>
            <option value="Gasification">Газификация</option>
        </select>
    </label>
    <br />
    <input class="btn btn-primary" type="submit" placeholder="Зарегистрироваться"/>
</form>

@code
{
    private string login = "";
    private string email = "";
    private string password = "";
    private string repassword = "";
    private string role = "";
    private string industry = "";
    private bool hidden = true;
    LocalStorageService localStorage;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private void ChangeVisibility(ChangeEventArgs e)
    {
        role = (string) e.Value;
        if (role == "Customer")
        {
            hidden = false;
        } else 
        {
            hidden = true;
        }
    }

    private void Registration()
    {
        if (userService.Registration(login, email, password, repassword, role, industry))
        {
            localStorage = new LocalStorageService(jsRuntime);
            localStorage.SetStringAsync("token", userService.GetToken());
            AuthStateProvider.IsAuthenticated = true;
            AuthStateProvider.UserName = userService.GetUsername();
            AuthStateProvider.Role = userService.GetRole();
            navManager.NavigateTo("");
        }
        //if (!isAuthenticated.HasValue)
        //{
        //    AuthStateProvider.IsAuthenticating = true;
        //}
        //else
        //{
        //    AuthStateProvider.IsAuthenticating = false;
        //    AuthStateProvider.IsAuthenticated = isAuthenticated.Value;
        //}

        authStateProvider.NotifyAuthenticationStateChanged();
    }
}