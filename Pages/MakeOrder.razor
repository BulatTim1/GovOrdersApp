@page "/makeorder"
@inject NavigationManager navManager
@inject UserService userService
@inject OrderService orderService
@inject IJSRuntime JS

<PageTitle>Создать заказ</PageTitle>

<form @onsubmit="CreateOrder">
	<h3>Создать заказ</h3>
	@if (Error != "")
	{
		<div class="form-control alert alert-danger">@Error</div>
	}
	<label>Название заказа:</label>
	<input @bind="Title" class="form-control" />
	<br />
	<label>Описание заказа:</label>
	<textarea @bind="Description" class="form-control" />
	<br />
	@if (Role == "AdminRole")
	{
		<label>
			Отрасль:
		</label>
		<select required class="form-select" @bind="Industry">
			<option value="" selected>Выберите отрасль</option>
			@foreach (var item in Industries)
			{
				<option value="@item.Key">@item.Value</option>
			}
		</select>
	}
	else
	{
		<label> Отрасль: @Industries[Industry]</label>
	}
	<br />
	<input class="btn btn-primary" type="submit" placeholder="Создать заказ" />
</form>

@code {

	Dictionary<string, string> Industries = new Dictionary<string, string>(){
		{ "WaterSupply", "Водоснабжение"},
		{ "Gasification", "Газификация"}
	};

	string Title = "";
	string Description = "";
	string Industry = "";
	string Author = "";
	string Role = "";
	string Error = "";

	private async void AddError(string error)
	{
		Error = error;
		StateHasChanged();
		await JS.InvokeVoidAsync("scrollToTopfunc");
	}

	protected override void OnInitialized()
	{
		if (!AuthStateProvider.IsAuthenticated)
		{
			navManager.NavigateTo("/login");
		}
		Role = userService.GetRole();
		if (Role != "CustomerRole" && Role != "AdminRole")
		{
			navManager.NavigateTo("/login");
		}
		else
		{
			Industry = userService.GetIndustry();
			Author = userService.GetId();
		}
	}

	private void CreateOrder()
	{
		if (Industry == "")
		{
			AddError("Выберите отрасль!");
			return;
		}
		orderService.AddOrder(Title, Description, Industry, Author);
		navManager.NavigateTo("");
	}
}
