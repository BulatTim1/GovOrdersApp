@page "/order/{Id}"
@using GovOrdersApp.Data.Orders
@using GovOrdersApp.Data.Users
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@inject OrderService orderService
@inject NavigationManager navManager
@inject UserService userService
@inject FileService fsService
@inject IJSRuntime JS

<PageTitle>Заказ</PageTitle>

<div class="d-flex flex-column justify-content-between" style="max-width: 45em; margin: 0 auto; padding-bottom: 5em;">
	<h3 class="align-self-center mb-3 font-weight-bold">Заказ @Order.Title</h3>
	@if (CurrentUserRole == "AdminRole" || CurrentUserRole == "CustomerRole")
	{
		<form class="pb-3 mb-3 border-bottom" @onsubmit="UpdateOrder">
			@if (Error != "")
			{
				<div class="form-control alert alert-danger">@Error</div>
			}
			<label>
				<p></p>Название:
			</label>
			<input class="form-control" @bind="Order.Title" />

			<br />
			<label>
				Описание:
			</label>
			<textarea rows=10 style="resize: none; " class="form-control" @bind="Order.Description" />

			<br />
			<label>
				Заказчик:
				@AuthorName
			</label>
			<br />
			<label>
				Застройщик:
			</label>
			<select class="form-select" @bind="Order.Builder">
				@if (Order.Builder == "")
				{
					<option value="" selected>Выберите застройщика</option>
				}
				else
				{
					<option value="">Выберите застройщика</option>
				}
				@foreach (var item in Builders)
				{
					@if (item.Id == Order.Builder)
					{
						<option value="@item.Id" selected>@item.FullName</option>
					}
					else
					{
						<option value="@item.Id">@item.FullName</option>
					}
				}
			</select>
			<br />
			<label>
				Проектировщик:
			</label>
			<select class="form-select" @bind="Order.Designer">
				@if (Order.Designer == "")
				{
					<option value="" selected>Выберите проектировщика</option>
				}
				else
				{
					<option value="">Выберите проектировщика</option>
				}
				@foreach (var item in Designers)
				{
					@if (item.Id == Order.Designer)
					{
						<option value="@item.Id" selected>@item.FullName</option>
					}
					else
					{
						<option value="@item.Id">@item.FullName</option>
					}
				}
			</select>
			<br />
			<label>
				Отрасль:
			</label>
			@if (CurrentUserRole == "AdminRole")
			{
				<select class="form-select" @bind="Order.Industry">
					@if (Order.Industry == "")
					{
						<option value="" selected>Выберите отрасль</option>
					}
					else
					{
						<option value="">Выберите отрасль</option>
					}
					@foreach (var item in Industries)
					{
						@if (item.Key == Order.Industry)
						{
							<option value="@item.Key" selected>@item.Value</option>
						}
						else
						{
							<option value="@item.Key">@item.Value</option>
						}
					}
				</select>
			}
			else
			{
				<p>@Industries[Order.Industry]</p>
			}
			<br />
			<input class="form-control btn btn-primary" type="submit" value="Обновить" />
		</form>
	}
	else
	{
		<div class="d-flex flex-column justify-content-between pb-3 mb-3 border-bottom">
			<p>Название: @Order.Title</p>
			<p>Описание: @Order.Description</p>
			<p>Закачик: @AuthorName</p>
			<p>@Industries[Order.Industry]</p>
			<p>Проектировщик: @(Designers.Where(x => x.Id == Order.Designer).FirstOrDefault()?.FullName)</p>
			<p>Заказчик: @(Builders.Where(x => x.Id == Order.Builder).FirstOrDefault()?.FullName)</p>
		</div>
	}


	<h3 class="align-self-center mb-3">Комментарии</h3>
	<div class="d-flex flex-column justify-content-between pb-3">
		@foreach (var mes in Order.Comments)
		{
			<div class="card mb-3">
				<div class="card-body d-flex flex-row justify-content-between">
					<div>
						<h5 class="card-title">@userService.GetUser(mes.User).FullName</h5>
						<h6 class="card-subtitle form-text pb-3">@(mes.Date.ToString("dd.MM.yyyy HH:mm"))</h6>
						<p class="card-text">@mes.Message</p>
					</div>
					@if (CurrentUserRole == "AdminRole" || mes.User == CurrentUserId)
					{
						<div class="align-self-center">
							<button class="btn btn-primary" @onclick="@(() => DeleteComment(mes))">Удалить</button>
						</div>
					}
				</div>
			</div>
		}
	</div>

	<h4 class="align-self-center">Отправить комментарий</h4>
	<form class="pb-3 mb-3 border-bottom" @onsubmit="AddMessage">
		<input class="form-control" @bind="CommentMessage" placeholder="Комментарий" />
		<br />
		<input class="form-control btn btn-primary" type="submit" placeholder="Добавить комментарий" />
	</form>

	<h3 class="align-self-center mb-3">Документы</h3>

	<div class="d-flex flex-column justify-content-between pb-3">
		<table class="table mb-3">
			<thead class="thead-dark">
				<tr>
					<th scope="col">Документ</th>
					<th scope="col">Утвержден</th>
					<th scope="col">Важен</th>
					<th scope="col">Скачать</th>
					<th scope="col">Удалить</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var doc in Order.Documents)
				{
					@if (CurrentUserRole == "AdminRole" || CurrentUserRole == "CustomerRole")
					{
						<tr class="@((doc.IsRequired) ? "bg-required" : (doc.IsChecked) ? "bg-checked" : "")">
							<td>@doc.Title</td>
							<td><input type="checkbox" checked="@doc.IsChecked" @oninput="@((e) => {doc.IsChecked = (bool)e.Value; UpdateOrder();})" /></td>
							<td><input type="checkbox" checked="@doc.IsRequired" @oninput="@((e) => {doc.IsRequired = (bool)e.Value; UpdateOrder();})" /></td>
							<td><button class="btn btn-info" @onclick="@(() => DownloadFile(doc.FileId))">Скачать</button></td>
							<td><button class="btn btn-danger" @onclick="@(() => DeleteFile(doc.FileId))">Удалить</button></td>
						</tr>
					}
					else
					{
						<tr class="@((doc.IsRequired) ? "bg-required" : (doc.IsChecked) ? "bg-checked" : "")">
							<td>@doc.Title</td>
							<td><input type="checkbox" @bind="doc.IsChecked" readonly disabled /></td>
							<td><input type="checkbox" @bind="doc.IsRequired" readonly disabled /></td>
							<td><button class="btn btn-info" @onclick="@(() => DownloadFile(doc.FileId))">Скачать</button></td>
							<td></td>
						</tr>
					}
				}
			</tbody>
		</table>
	</div>
	<h4 class="align-self-center">Отправить документ</h4>
	@if (CurrentUserRole == "BuilderRole" || CurrentUserRole == "DesignerRole" || CurrentUserRole == "AdminRole")
	{
		<form @onsubmit="AddDocument">
			<div class="form-group">
				<label>Тип документа</label>
				<select class="form-select" @bind="DocumentTitle">
					<option value="" disabled selected hidden>Выберите тип документа</option>
					@foreach ((string, string) title in DocumentTitles[Order.Industry])
					{
						if (title.Item2.Contains(CurrentUserRole) || CurrentUserRole == "AdminRole")
						{
							<option value="@title.Item1">@(title.Item1.Length > 67 ? title.Item1.Substring(0, 67) + "..." : title.Item1)</option>
						}
					}
				</select>
			</div>
			<br />
			<InputFile OnChange="OnInputFileChange" type="file" class="form-control form-control-file" />
			<br />
			<input class="form-control btn btn-primary" type="submit" placeholder="Добавить документ" />
		</form>
	}
</div>
@code {
	[Parameter]
	public string Id { get; set; } = "";

	Dictionary<string, string> Industries = new Dictionary<string, string>(){
		{ "WaterSupply", "Водоснабжение"},
		{ "Gasification", "Газификация"}
	};

	Dictionary<string, (string, string)[]> DocumentTitles = new Dictionary<string, (string, string)[]>(){
		{"Gasification", new (string, string)[] {
				("Письмо-обращение на имя Президента,Премьер-Министра, Минстрой РТ", "BuilderRole"),
				("Задание на проектирование", "BuilderRole"),
				("Ситуационный план (утвержденный исполкомом)", "BuilderRole"),
				("Технические условия на присоединение к газораспределительной сети (№, дата, срок действий Технических условий)", "BuilderRole"),
				("Технический паспорт (план БТИ) объекта СКБ", "BuilderRole"),
				("Технический паспорт (план БТИ) существующей котельной", "BuilderRole"),
				("АКТ обследования объекта", "BuilderRole"),
				("Технические условия на сети электроснабжение, водоснабжения, водоотведения при установке БМК", "BuilderRole"),
				("Согласование посадки котельной", "BuilderRole"),

				("Технико-экономические показатели (ТЭП)", "DesignerRole"),
				("Вводной газопровод низкого давления", "BuilderRole"),
			}
		},
		{"WaterSupply", new (string, string)[] {
			("Акт обследования и выбора трассы сети водоснабжения", "BuilderRole"),
			("Акт обследования и выбор места под проектируемую скважину", "BuilderRole"),
			("Согласованный ситуационный план (М1:10000 или М1:25000) с нанесением источников воды (скважин, родников и т.п.), существующих водонапорных башен, предполагаемой трассой водопровода и места врезки в существующую сеть", "BuilderRole"),
			("План населённого пункта в М 1:1000 или М 1:500 топографическая съемка)", "BuilderRole"),
			("Технические условия на водоснабжение", "BuilderRole"),
			("Технические условия на электроснабжение (для насосной станции первого или второго подъема)", "BuilderRole"),
			("Градостроительный план земельного участка", "BuilderRole"),
			("Справка согласования с собственниками земельных участков", "BuilderRole"),
			("Документ, подтверждающий проведение межевания с присвоением кадастрового номера земельного участка под строительство водопровода и сооружений на нем", "BuilderRole"),
			("Заключение Органа Роспотребнадзора санитарно-эпидемиологической службы по отводу земельного участка и результат радиационного обследования", "BuilderRole"),
			("Сведения о наличие водозаборных скважин (родников) на территории хозяйства", "BuilderRole"),

			("Технико-экономические показатели (ТЭП)", "DesignerRole"),
			}
		},
	};

	Order Order;
	List<AppUser> Builders = new List<AppUser>();
	List<AppUser> Designers = new List<AppUser>();
	string AuthorName = "";
	string CommentMessage = "";
	string CurrentUserId = "";
	string CurrentUserRole = "";
	string DocumentTitle = "";
	string Error = "";
	IBrowserFile File;

	protected override void OnInitialized()
	{
		if (!AuthStateProvider.IsAuthenticated) navManager.NavigateTo("");
		Order = orderService.GetOrder(Id);
		try
		{
			AuthorName = userService.GetUser(Order.Author).FullName;
			CurrentUserRole = userService.GetRole();
			CurrentUserId = userService.GetId();
			Builders = userService.GetUsersByRole("BuilderRole");
			Designers = userService.GetUsersByRole("DesignerRole");
		}
		catch
		{
			navManager.NavigateTo("");
		}
	}

	private async void AddError(string error)
	{
		Error = error;
		StateHasChanged();
		await JS.InvokeVoidAsync("scrollToTopfunc");
	}

	private void UpdateOrder()
	{
		var builderUser = userService.GetUser(Order.Builder);
		var designerUser = userService.GetUser(Order.Designer);
		if (!(Order.Builder == null || (builderUser != null && builderUser.GetType() == new BuilderRole().GetType())))
		{
			AddError("Строитель не может быть назначен!");
		}
		if (!(Order.Designer == null || (designerUser != null && designerUser.GetType() == new DesignerRole().GetType())))
		{
			AddError("Дизайнер не может быть назначен!");
		}
		orderService.UpdateOrder(Order);
		StateHasChanged();
	}

	private void AddMessage()
	{
		if (CommentMessage == "")
		{
			AddError("Введите сообщение!");
			return;
		}
		Comment comment = new Comment()
			{
				User = userService.GetId(),
				Message = CommentMessage
			};
		Order.Comments.Add(comment);
		UpdateOrder();
		CommentMessage = "";
	}

	private void DeleteComment(Comment comment)
	{
		Order.Comments.Remove(comment);
		UpdateOrder();
	}

	private void OnInputFileChange(InputFileChangeEventArgs e)
	{
		File = e.File;
		//string[] tempExt = file.Name.ToLower().Split('.');
		//string ext = tempExt[tempExt.Length - 1];
		//string name = Path.GetRandomFileName() + '.' + ext;
		//if (file.ContentType.StartsWith("image/") && new string[] { "png", "jpg", "jpeg", "svg", "webp" }.Contains(ext))
		//{
		//}
		this.StateHasChanged();

	}

	private async void AddDocument()
	{
		if (DocumentTitles[Order.Industry].Where(x => x.Item1 == DocumentTitle).FirstOrDefault() != (null, null) && File != null)
		{
			string fileid = await fsService.UploadFileAsync(File.Name, File.OpenReadStream(4096000000));
			Order.Documents.Add(new OrderDocument()
				{
					Title = DocumentTitle,
					FileId = fileid,
					OrderId = Order.Id,
				});
			DocumentTitle = "";
			File = null;
			UpdateOrder();
		}
		else
		{
			AddError("Неправильный тип файла");
		}
	}

	private async void DeleteFile(string fileId)
	{
		fsService.DeleteFile(fileId);
		Order.Documents.Remove(Order.Documents.Find(x => x.FileId == fileId));
		UpdateOrder();
	}

	private async void DownloadFile(string fileId)
	{
		if (CurrentUserRole != null && CurrentUserRole.Contains("Role") && fileId != "")
		{
			var filename = fsService.IsExsists(fileId);
			if (filename != null)
			{
				var stream = await fsService.DownloadFileAsync(fileId);
				await DownloadFileFromStream(filename, stream);
			}
		}
		else
		{
			AddError("Недостаточно прав!");
		}
	}

	private async Task DownloadFileFromStream(string filename, Stream stream)
	{
		using var streamRef = new DotNetStreamReference(stream: stream);

		await JS.InvokeVoidAsync("downloadFileFromStream", filename, streamRef);
	}
}
