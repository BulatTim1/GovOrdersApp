@page "/"
@using GovOrdersApp.Data.Orders
@inject AuthStateProvider authStateProvider
@inject NavigationManager navManager
@inject UserService userService
@inject OrderService orderService
@inject IJSRuntime jsRuntime

<PageTitle>Хаб</PageTitle>

<h1>Хаб</h1>

<AuthorizeView>
	<NotAuthorized>
		<p>Чтобы увидеть здесь что-то, нужно войти.</p>
	</NotAuthorized>
	<Authorized>
		@if(role == "AdminRole")
		{
			<p>Вы вошли как администратор.</p>
		}
		else if (role == "BuilderRole")
		{
			<p>Вы вошли как застройщик.</p>
		}
		else if (role == "CustomerRole")
		{
			<p>Вы вошли как заказчик.</p>
		}
		else if (role == "DesignerRole")
		{
			<p>Вы вошли как проектировщик.</p>
		}
		else
		{
			<p>Вы как сюда зашли? Роль: @role</p>
		}
		<OrdersTable Orders="@orders" Role="@role"></OrdersTable>
	</Authorized>
</AuthorizeView>

@code
{
	string role = "Guest";
	List<Order> orders;
	LocalStorageService localStorage;

	protected override async void OnInitialized()
	{
		if (AuthStateProvider.IsAuthenticated)
		{
			role = userService.GetRole();
			switch (role)
			{
				case "AdminRole":
					orders = orderService.GetOrders();
					break;
				case "CustomerRole":
					orders = orderService.GetOrdersByIndustry(userService.GetIndustry());
					break;
				case "BuilderRole":
					orders = orderService.GetOrdersByBuilder(userService.GetId());
					break;
				case "DesignerRole":
					orders = orderService.GetOrdersByDesigner(userService.GetId());
					break;
			}
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && !AuthStateProvider.IsAuthenticated)
		{
			localStorage = new LocalStorageService(jsRuntime);
			string token = await localStorage.GetStringAsync("token");
			if (userService.CheckToken(token))
			{
				AuthStateProvider.IsAuthenticated = true;
				AuthStateProvider.UserName = userService.GetUsername();
				AuthStateProvider.Role = userService.GetRole();
				navManager.NavigateTo("", true);
			}
		}
	}
}