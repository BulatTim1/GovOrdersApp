@page "/"
@using GovOrdersApp.Data.Orders
@inject AuthStateProvider authStateProvider
@inject NavigationManager navManager
@inject UserService userService
@inject OrderService orderService
@inject IJSRuntime jsRuntime

<PageTitle>Хаб</PageTitle>

<div class="d-flex flex-column justify-content-between" style="max-width: 45em; margin: 0 auto;">

<AuthorizeView>
		<NotAuthorized>
		<h1 style="text-align:center;">Хаб</h1>
			<p style="text-align:center;">Чтобы увидеть здесь что-то, нужно войти.</p>
	</NotAuthorized>
	<Authorized>
		<OrdersTable Orders="@orders" Role="@role"></OrdersTable>
	</Authorized>
</AuthorizeView>
</div>

@code
{
	string role = "Guest";
	List<Order> orders;
	LocalStorageService localStorage;

	protected override async void OnInitialized()
	{
		if (AuthStateProvider.IsAuthenticated)
		{
			role = userService.GetRole();
			switch (role)
			{
				case "AdminRole":
					orders = orderService.GetOrders();
					break;
				case "CustomerRole":
					orders = orderService.GetOrdersByIndustry(userService.GetIndustry());
					break;
				case "BuilderRole":
					orders = orderService.GetOrdersByBuilder(userService.GetId());
					break;
				case "DesignerRole":
					orders = orderService.GetOrdersByDesigner(userService.GetId());
					break;
			}
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && !AuthStateProvider.IsAuthenticated)
		{
			localStorage = new LocalStorageService(jsRuntime);
			string token = await localStorage.GetStringAsync("token");
			if (userService.CheckToken(token))
			{
				AuthStateProvider.IsAuthenticated = true;
				AuthStateProvider.UserName = userService.GetUsername();
				AuthStateProvider.Role = userService.GetRole();
				navManager.NavigateTo("", true);
			}
		}
	}
}